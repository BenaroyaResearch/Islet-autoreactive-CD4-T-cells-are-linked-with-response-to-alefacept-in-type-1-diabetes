rm(list = ls())
library(plyr)
library(edgeR)
library(compareGroups)
library(dbscan)
library(MAST)
library(ggsignif)
library(monocle3)
library(dplyr)
library(geosphere)
library(RColorBrewer)
library(gtools)
library(ggplot2); library(reshape2); theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(), 
                                                 panel.grid.minor = element_blank()) +
                              theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))

## override errors in circlize and Monocle3

old_ops <- options(warn = 1) # if warning = 2, warning is converted to error
options(old_ops)

## load files
setwd("/Users/peterlinsley/Desktop/Balmas_et_al_code/data") # folder on Desktop

counts_uncorrected <- read.table("combined_counts_filtered_for_batchcorr.csv", header=TRUE,sep= ",", row.names=1)

ens2hgnc = readRDS("ens2hgnc.RDS")

### subset data

#design = read.delim("design_for_peter.txt", stringsAsFactors = F, header=TRUE, row.names = 1)

filename = "Seurat_meta.data_w_cell_identity_and_cell_cycle.csv"

design = read.csv(filename, stringsAsFactors = F)
colnames(design)[1] = c("libID")
row.names(design) = design$libID

design$libID = row.names(design)
design$batch4 = gsub(" ","_", design$batch4)
design$batch4 = factor(design$batch4)

frozenlibs <- design$libId[ design$batch4 != "P91 fresh"]

counts_uncorrected = subset(counts_uncorrected, select = colnames(counts_uncorrected) %in% design$libID)

b = c("P91_frozen", "P168_frozen_1") ## remove P168-2
#design = subset(design, design$batch4 %in% b & design$CD45RA == "FALSE") # reduce from 1994 to 946.
design = subset(design, !design$batch4 %in% b) # 

design$batch4 = as.character(design$batch4)
design$batch4 = factor(design$batch4)
design$CD45RA = as.character(design$CD45RA)
design$CD45RA = factor(design$CD45RA)
design$project = factor(design$project)

exponentiated <- counts_uncorrected[,frozenlibs]
exponentiated <- subset(exponentiated, select = colnames(exponentiated) %in% design$libID)
gm <- data.frame( gene_short_name=ens2hgnc[rownames(exponentiated)], Ensembl.ID=rownames(exponentiated) )
rownames(gm) <- gm$Ensembl.ID
gm <- gm[rownames(exponentiated),]

gm <- gm[rownames(exponentiated),]

## load clean anno

anno.clean = read.delim("P168_clean_anno_from_research_database04212020.txt", stringsAsFactors = F)
anno.clean$libID = anno.clean$libid

idKey = read.csv("T1DAL_id_key.csv", stringsAsFactors = F)
anno.clean$participant_id = idKey$Participant_id[match(anno.clean$donor_id, idKey$SubjectID)]
anno.clean$participant_id = idKey$Participant_id[match(anno.clean$donor_id, idKey$SubjectID)]

slopes.full = read.csv("T1DAL_cpeptide_rates.csv", stringsAsFactors = F)
slopes.full[,2] = NULL
colnames(slopes.full)[2] = c("slope")

slopes = subset(slopes.full, participant_id %in% anno.clean$participant_id)
slopes[is.na(slopes)] = -1
slopes$rate = ifelse(slopes$slope >median(slopes$slope), "S", "F")
slopes$libID = anno.clean$libID[match(slopes$participant_id, anno.clean$participant_id)]

anno.clean$rate = slopes$rate[match(anno.clean$participant_id, slopes$participant_id)]
anno.clean$slope = slopes$slope[match(anno.clean$participant_id, slopes$participant_id)]

demo = read.delim("ADLB1_2019-04-26_10-54-53_viral_load.txt", stringsAsFactors = F)

design$sorter = anno.clean$sorter[match(design$libID, anno.clean$libID)]
design$rd = anno.clean$received_date[match(design$libID, anno.clean$libID)]
design$rate = anno.clean$rate[match(design$libID, anno.clean$libID)]
design$slope = anno.clean$slope[match(design$libID, anno.clean$libID)]
design$participant_id = anno.clean$participant_id[match(design$libID, anno.clean$libID)]
design$Treatment = demo$Treatment[match(design$participant_id, demo$Participant.ID)]
design$cluster = NULL

### load Monocle object

cds = readRDS("cds_no_trajectory_P168_JCI_Insight.rds")

## correct UMAP orientation. Sometimes orientation is reversed, but this is arbitrary. If necesssry, orrect by multiplying UMAP coordinates by -1.

reducedDims(cds)$UMAP = -1*reducedDims(cds)$UMAP

## set pseudotime trajectory. When pop-up window appears, select left-most point in cluster 1 as start.

set.seed(42)
cds <- learn_graph(cds, learn_graph_control=list(minimal_branch_len = 20, geodesic_distance_ratio = 2)) # change parameeters to remove detail

## Step 6: Order cells
cds <- order_cells(cds)

##################
## bubble plots CD markers

## load cd markers 
## https://www.genenames.org/data/genegroup/#!/group/471

cd.list = read.csv("HGNC_CD_molecules_06132020.csv", stringsAsFactors = F)

CDS = cd.list$symbol

genes = c("CCR7", "CXCR4", "IL2RA", "CD40LG", "IL7R", "TNFSF14", "CD69", "CD44") # selected
yCdOr = rev(genes)

cds_subset <- cds[rowData(cds)$gene_short_name %in% genes,] # subset to genes
rowData(cds_subset)$gene_short_name = factor(rowData(cds_subset)$gene_short_name, levels = genes)

if(dev.cur()>1) dev.off()
quartz(width=15,height=12, dpi=72)  ### open plotting window
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 
				+ theme(legend.key = element_blank()))

plot_genes_by_group(
  cds,
  yCdOr,
  group_cells_by = "Clusters",
  reduction_method = "UMAP",
  norm_method = c("log"),
  lower_threshold = 0,
  max.size = 20,
  ordering_type = c("none"),
  axis_order = "group_marker",
  flip_percentage_mean = FALSE,
  pseudocount = 1,
  scale_max = 4,
  scale_min = 0
)
library("viridis")
last_plot() + scale_colour_gradientn(colours=viridis(8))
xlab = "\nCluster"
ylab = "CD marker (HGNC symbol)\n"
last_plot() + labs(x = xlab, y = ylab)
p = last_plot()

setwd("/Users/peterlinsley/Desktop/Balmas_et_al_code/Figure_PDFs")
filename = "Fig2C_Bubble_plot_of_marker_genes.pdf"
ggsave(filename, p)

