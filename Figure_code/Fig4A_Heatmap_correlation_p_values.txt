rm(list = ls())
library(plyr)
library(edgeR)
library(compareGroups)
library(dbscan)
library(MAST)
library(ggsignif)
library(monocle3)
library(dplyr)
library(geosphere)
library(RColorBrewer)
library(gtools)
library(ggplot2); library(reshape2); theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(), 
                                                 panel.grid.minor = element_blank()) +
                              theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))

## override errors in circlize and Monocle3

old_ops <- options(warn = 1) # if warning = 2, warning is converted to error
options(old_ops)

## load files
setwd("/Users/peterlinsley/Desktop/Balmas_et_al_code/data") # folder on Desktop

counts_uncorrected <- read.table("combined_counts_filtered_for_batchcorr.csv", header=TRUE,sep= ",", row.names=1)

ens2hgnc = readRDS("ens2hgnc.RDS")

### subset data

#design = read.delim("design_for_peter.txt", stringsAsFactors = F, header=TRUE, row.names = 1)

filename = "Seurat_meta.data_w_cell_identity_and_cell_cycle.csv"

design = read.csv(filename, stringsAsFactors = F)
colnames(design)[1] = c("libID")
row.names(design) = design$libID

design$libID = row.names(design)
design$batch4 = gsub(" ","_", design$batch4)
design$batch4 = factor(design$batch4)

frozenlibs <- design$libId[ design$batch4 != "P91 fresh"]

counts_uncorrected = subset(counts_uncorrected, select = colnames(counts_uncorrected) %in% design$libID)

b = c("P91_frozen", "P168_frozen_1") ## remove P168-2
#design = subset(design, design$batch4 %in% b & design$CD45RA == "FALSE") # reduce from 1994 to 946.
design = subset(design, !design$batch4 %in% b) # 

design$batch4 = as.character(design$batch4)
design$batch4 = factor(design$batch4)
design$CD45RA = as.character(design$CD45RA)
design$CD45RA = factor(design$CD45RA)
design$project = factor(design$project)

exponentiated <- counts_uncorrected[,frozenlibs]
exponentiated <- subset(exponentiated, select = colnames(exponentiated) %in% design$libID)
gm <- data.frame( gene_short_name=ens2hgnc[rownames(exponentiated)], Ensembl.ID=rownames(exponentiated) )
rownames(gm) <- gm$Ensembl.ID
gm <- gm[rownames(exponentiated),]

gm <- gm[rownames(exponentiated),]

## load clean anno

anno.clean = read.delim("P168_clean_anno_from_research_database04212020.txt", stringsAsFactors = F)
anno.clean$libID = anno.clean$libid

idKey = read.csv("T1DAL_id_key.csv", stringsAsFactors = F)
anno.clean$participant_id = idKey$Participant_id[match(anno.clean$donor_id, idKey$SubjectID)]
anno.clean$participant_id = idKey$Participant_id[match(anno.clean$donor_id, idKey$SubjectID)]

slopes.full = read.csv("T1DAL_cpeptide_rates.csv", stringsAsFactors = F)
slopes.full[,2] = NULL
colnames(slopes.full)[2] = c("slope")

slopes = subset(slopes.full, participant_id %in% anno.clean$participant_id)
slopes[is.na(slopes)] = -1
slopes$rate = ifelse(slopes$slope >median(slopes$slope), "S", "F")
slopes$libID = anno.clean$libID[match(slopes$participant_id, anno.clean$participant_id)]

anno.clean$rate = slopes$rate[match(anno.clean$participant_id, slopes$participant_id)]
anno.clean$slope = slopes$slope[match(anno.clean$participant_id, slopes$participant_id)]

demo = read.delim("ADLB1_2019-04-26_10-54-53_viral_load.txt", stringsAsFactors = F)

design$sorter = anno.clean$sorter[match(design$libID, anno.clean$libID)]
design$rd = anno.clean$received_date[match(design$libID, anno.clean$libID)]
design$rate = anno.clean$rate[match(design$libID, anno.clean$libID)]
design$slope = anno.clean$slope[match(design$libID, anno.clean$libID)]
design$participant_id = anno.clean$participant_id[match(design$libID, anno.clean$libID)]
design$Treatment = demo$Treatment[match(design$participant_id, demo$Participant.ID)]
design$cluster = NULL

### load Monocle object

cds = readRDS("cds_no_trajectory_P168_JCI_Insight.rds")

## correct UMAP orientation. Sometimes orientation is reversed, but this is arbitrary. If necesssry, orrect by multiplying UMAP coordinates by -1.

reducedDims(cds)$UMAP = -1*reducedDims(cds)$UMAP

##############################
## assessing relationship betweem C-peptide slopes and levels of CD45RA cells in cluster 3

colData = data.frame(colData(cds))
to.analyze = subset(colData, renamedClusters == 3)

noType1 =  ddply(to.analyze,.(donor.id,  slope, Treatment, rate, CD45RA), plyr::summarize, sum = length(renamedClusters)) # 
noType2 =  ddply(to.analyze,.(donor.id,  slope, Treatment, rate), plyr::summarize, sum = length(renamedClusters)) # 

## iterative correlation of slopes with cell numbers

DFa = data.frame(matrix(ncol = 4, nrow = 0), stringsAsFactors = F)
DFp = data.frame(matrix(ncol = 4, nrow = 0), stringsAsFactors = F)

xnames = c(seq(1,5, by = 1))
ncx = length(xnames)

for(i in 1:ncx){
	q = xnames[i]
	qsub = subset(colData, renamedClusters == q)

	noType3 =  ddply(qsub,.(donor.id,  slope, Treatment, rate), plyr::summarize, sum = length(renamedClusters)) # 
	
	a = subset(noType3, Treatment == "A")
	p = subset(noType3, Treatment == "P")
	
	testA = cor.test(a$sum, a$slope,  method = c("spearman")); 
	testP = cor.test(p$sum, p$slope,  method = c("spearman")); 
	
	resultA = c(q, testA$estimate, testA$p.value, "active")
	resultP = c(q, testP$estimate, testP$p.value, "placebo")
	DFa = rbind(DFa, resultA)
	DFp = rbind(DFp, resultP)
				}
colnames(DFa) = c("cluster", "R", "p.val", "treatment")
colnames(DFp) = c("cluster", "R", "p.val", "treatment")

comb = rbind(DFa, DFp)
comb$cluster = as.numeric(comb$cluster)
comb$R = as.numeric(comb$R)
comb$p.val = as.numeric(comb$p.val)

comb$pAdj = p.adjust(comb$p.val, "BH")

if(dev.cur()>1) dev.off()
quartz(width=15,height=8,dpi=72)  ### open plotting window
theme_set(theme_bw(30) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.y=element_blank()) + theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 6))
update_geom_defaults("line", aes(size = 0.25))

myPalette <- colorRampPalette(rev(brewer.pal(11, "RdYlBu")))

ggplot(noType1, aes(x = slope, y = sum)) + geom_point(colour = "blue") + facet_grid(CD45RA~Treatment)
last_plot() + geom_smooth(method = glm)
last_plot() + scale_x_continuous(limits = c(-1, 0.5), breaks = c(-1, -0.5, 0, 0.5))

xlab =  "C-peptide slope"
ylab = "Cells per cluster 3\n"
last_plot() + labs(x = xlab, y = ylab)

## express as fraction rather than count
tot = table(to.analyze$Treatment)
totA = tot[1]
totP = tot[2]

noType2$tot = ifelse(noType2$Treatment == "A", totA, totP)
noType2$freq = noType2$sum/noType2$tot 

require(scales)
ggplot(noType2, aes(x = slope, y = freq)) + geom_point(colour = "blue") + facet_grid(~Treatment)
last_plot() + scale_y_continuous(limits = c(0, 0.3), breaks = c(0, 0.1, 0.2, 0.3))
last_plot() + theme(plot.margin = unit(c(2,2,2,2), "cm"))
last_plot() + geom_smooth(method = glm)
last_plot() + scale_x_continuous(limits = c(-1, 0.5), breaks = c(-1, -0.5, 0, 0.5))

#xlab =  "\nC-peptide slope"
#ylab = "Cells per cluster 3, frequency\n"
#last_plot() + labs(x = xlab, y = ylab)
 
## statistics

a = subset(noType2, Treatment == "A")
p = subset(noType2, Treatment == "P")

aCount = ddply(a,.(donor.id), plyr::summarize, sum = length(donor.id))
pCount = ddply(p,.(donor.id), plyr::summarize, sum = length(donor.id))

aF = subset(a, rate == "F")
aS = subset(a, rate == "S")

pF = subset(a, rate == "F")
pS = subset(a, rate == "S")

aTrue = subset(noType1, Treatment == "A" & CD45RA == "TRUE")
aFalse = subset(noType1, Treatment == "A" & CD45RA == "FALSE")

testA2 = cor.test(aF$sum, aF$slope,  method = c("spearman")); testA

testA3 = cor.test(aTrue$sum, aTrue$slope,  method = c("spearman")); testA3# p-value = 0.006869
testA4 = cor.test(aFalse$sum, aFalse$slope,  method = c("spearman")); testA4# p-value = 0.1782

A34adj = p.adjust(c(0.006869, 0.04687), "BH") # [1] 0.013738 0.046870

## correlation tests
testA = cor.test(a$sum, a$slope,  method = c("spearman")); testA #p-value = 0.002216
testP = cor.test(p$sum, p$slope,  method = c("spearman")); testP # p-value = 0.4131

testA = cor.test(a$freq, a$slope, method = c("pearson")); testA #p-value = 0.002101
testP = cor.test(p$freq, p$slope, method = c("pearson")); testP #0.8545

apAdj = p.adjust(c(0.002216, 0.3956), "BH"); apAdj #0.004432, 0.3956000. Corr = -0.817824, 0.08601912

## heatmap
if(dev.cur()>1) dev.off()
quartz(width=12,height=4, dpi=72)  ### open plotting window

theme_set(theme_bw(30) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
theme(legend.text = element_text(size=12))

myPalette <- colorRampPalette((brewer.pal(9, "Blues")))

ggplot(data = comb, aes(x=cluster, y=treatment, fill = -log10(pAdj))) + geom_tile()
last_plot() + scale_fill_gradientn(colours = myPalette(25), limits=c(0, 2))

p = last_plot()
setwd("/Users/peterlinsley/Desktop/Balmas_et_al_code/Figure_PDFs")
filename = "Fig4A_Heatmap_correlation_p_values.pdf"
ggsave(filename, p)


