last_plot() + scale_y_continuous(limits = c(-2,100), breaks = c(0,25, 50, 75,100))
p = last_plot()
p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = "Fig_3D_CDR1_CDR3_ratio_versus_junction_length.pdf"
ggsave(filename, p)
warnings()
rm(list = ls())
library(plyr)
library(edgeR)
library(compareGroups)
library(dbscan)
library(MAST)
library(ggsignif)
library(monocle3)
library(dplyr)
library(geosphere)
library(RColorBrewer)
library(gtools)
library(psych)
library(gdata)
library(ggplot2); library(reshape2); theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
##################
## TCR CDR peptide contacts- all
## Prepare and load data file
## Use all PIT-matched IAR1 TCRs with known specificity. Construct models using TCRmodel (https://tcrmodel.ibbr.umd.edu/). Assumed ##same peptide bound as by the exmplar with known specificity. View models in Mol* viewer (https://molstar.org/viewer/). Select peptide chain, the select residues, followed by Manipulate Selection, Surrounding Residues 5A of selection. Record number of residues highlighted for each chain in sequence viewer- repeat counts at least twice or until getting a consensus result. Identify CDR1, CDR2, CDR3 and other regions using IMGT. Manually tabulate results in CDR regions. Verify results by checking at least twice.
## load tabulated and annotated Structural results.
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
contacts = read.delim("PIT_matched_TCRs_w_chain_seqs_manual_All_080123.txt")
contacts$traR13 = contacts$chain1.cdr1/contacts$chain.1.cdr3
contacts$trbR13 = contacts$chain2.cdr1/contacts$chain.2.cdr3
mCont = melt(contacts, measure.vars = c("chain1.cdr1",	"chain.1.cdr2", "chain.1.cdr3", "chain2.cdr1",	"chain.2.cdr2",	"chain.2.cdr3", "otherTRA",	"otherTRB"))
colnames(mCont) = gsub("value","contacts", colnames(mCont))
mCont$variable = gsub("chain1.cdr1","TraCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr1","TraCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr2","TraCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain2.cdr1","TrbCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr1","TrbCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr2","TrbCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr3","TrbCDR3", mCont$variable, fixed = T)
mCont$variable = gsub("otherTRA","TraOther", mCont$variable, fixed = T)
mCont$variable = gsub("otherTRB","TrbOther", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr3","TraCDR3", mCont$variable, fixed = T)
#mCont$variable = factor(mCont$variable, levels = )
mCont$chain = ifelse(mCont$variable %in% grep("Tra", mCont$variable, value = T), "TRA",
ifelse(mCont$variable %in% grep("Trb", mCont$variable, value = T), "TRB","other"))
toPlot2 = subset(mCont, !variable %in% grep("other", mCont$variable, value = T))
toPlot2 = subset(toPlot2, !variable %in% grep("cdr2", mCont$variable, value = T))
#toPlot2 = na.omit(toPlot2)
###################
##  plot TRA CDR1/CDR3 contact ratio, color by PITmatch
toPlot3 = mCont[!duplicated(mCont$CloneID),]
#toPlot3 = na.omit(toPlot3 )
if(dev.cur()>1)dev.off()
quartz(width=11,height=8, dpi=72)  ### open plotting window
theme_set(theme_bw(30) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
update_geom_defaults("density2d", aes(size = 4))
#pal = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffed6f','#b15928', "gray")
pal = c("#1b9e77", "#d95f02", "#7570b3")
#pal = c("#d3d3d3", "#1b9e77", "other") # all dots gray palette
ggplot(toPlot3, aes(x = traLen, y = (traR13))) + geom_jitter(aes(color = PITmatch))
rm(list = ls())
library(plyr)
library(edgeR)
library(compareGroups)
library(dbscan)
library(MAST)
library(ggsignif)
library(monocle3)
library(dplyr)
library(geosphere)
library(RColorBrewer)
library(gtools)
library(psych)
library(gdata)
library(ggplot2); library(reshape2); theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
##################
## TCR CDR peptide contacts- all
## Prepare and load data file
## Use all PIT-matched IAR1 TCRs with known specificity. Construct models using TCRmodel (https://tcrmodel.ibbr.umd.edu/). Assumed ##same peptide bound as by the exmplar with known specificity. View models in Mol* viewer (https://molstar.org/viewer/). Select peptide chain, the select residues, followed by Manipulate Selection, Surrounding Residues 5A of selection. Record number of residues highlighted for each chain in sequence viewer- repeat counts at least twice or until getting a consensus result. Identify CDR1, CDR2, CDR3 and other regions using IMGT. Manually tabulate results in CDR regions. Verify results by checking at least twice.
## load tabulated and annotated Structural results.
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
contacts = read.delim("PIT_matched_TCRs_w_chain_seqs_manual_All_080123.txt")
contacts$traR13 = contacts$chain1.cdr1/contacts$chain.1.cdr3
contacts$trbR13 = contacts$chain2.cdr1/contacts$chain.2.cdr3
mCont = melt(contacts, measure.vars = c("chain1.cdr1",	"chain.1.cdr2", "chain.1.cdr3", "chain2.cdr1",	"chain.2.cdr2",	"chain.2.cdr3", "otherTRA",	"otherTRB"))
colnames(mCont) = gsub("value","contacts", colnames(mCont))
mCont$variable = gsub("chain1.cdr1","TraCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr1","TraCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr2","TraCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain2.cdr1","TrbCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr1","TrbCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr2","TrbCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr3","TrbCDR3", mCont$variable, fixed = T)
mCont$variable = gsub("otherTRA","TraOther", mCont$variable, fixed = T)
mCont$variable = gsub("otherTRB","TrbOther", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr3","TraCDR3", mCont$variable, fixed = T)
#mCont$variable = factor(mCont$variable, levels = )
mCont$chain = ifelse(mCont$variable %in% grep("Tra", mCont$variable, value = T), "TRA",
ifelse(mCont$variable %in% grep("Trb", mCont$variable, value = T), "TRB","other"))
toPlot2 = subset(mCont, !variable %in% grep("other", mCont$variable, value = T))
toPlot2 = subset(toPlot2, !variable %in% grep("cdr2", mCont$variable, value = T))
#toPlot2 = na.omit(toPlot2)
###################
##  plot TRA CDR1/CDR3 contact ratio, color by PITmatch
toPlot3 = mCont[!duplicated(mCont$CloneID),]
#toPlot3 = na.omit(toPlot3 )
if(dev.cur()>1)dev.off()
quartz(width=11,height=8, dpi=72)  ### open plotting window
theme_set(theme_bw(30) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
update_geom_defaults("density2d", aes(size = 4))
#pal = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffed6f','#b15928', "gray")
pal = c("#1b9e77", "#d95f02", "#7570b3")
#pal = c("#d3d3d3", "#1b9e77", "other") # all dots gray palette
ggplot(toPlot3, aes(x = traLen, y = (traR13))) + geom_jitter(aes(color = PITmatch))
last_plot() + geom_smooth(method='lm',formula=y ~ x, aes(), colour = "black");
last_plot() + scale_color_manual(values = pal, name = "PITmatch")# custom colors
#last_plot() + geom_hline(yintercept = 0.8)
xlab = "\nTRA junction length (AA)"
ylab = "Peptide contacts, \nCDR1/CDR3 ratio\n"
last_plot() + labs(x = xlab, y = ylab)
p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = "Fig_3D_CDR1_CDR3_ratio_versus_junction_length.pdf"
ggsave(filename, p)
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
## load PIT matched junctions
lev = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)
levSub = subset(lev, lv <2); nrow(levSub) # 1389
###########################
## peptide titration curves with and withoout PIT matches
## load specificity files
dr = read.csv("IAR_TCR_dose_reponse_curves.csv", stringsAsFactors = F)
dr$isletMatch = dr$junction_alpha %in% levSub$aJunc1
dr$PITmatch = dr$junction_alpha %in% levSub$aJunc1
dr = subset(dr, !broad_specificity == "HA")
dr$broad_specificity = gsub("GAD", "GAD65", dr$broad_specificity)
dr$broad_specificity = gsub("ZNP", "ZNT8", dr$broad_specificity)
dr$traJuncLen = nchar(dr$junction_alpha)
dr$trbJuncLen = nchar(dr$junction_beta)
if(dev.cur() >1) dev.off()
quartz(width=20,height=8)  ### open plotting window
#update_geom_defaults("line", aes(size = 8))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(dr, aes(x = log10(concentration), y = percent_proliferation, group = cloneID)) + geom_line(aes(colour = PITmatch), size = 2) + facet_grid(~broad_specificity)
last_plot() + scale_x_continuous(labels = scales::math_format(10^.x))
xlab = paste0("\nPeptide concentration, ", c("\u03BC"),"g","/ml")
ylab = "% Proliferation\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + scale_y_continuous(limits = c(-2,100), breaks = c(0,25, 50, 75,100))
p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = "Fig_3D_CDR1_CDR3_ratio_versus_junction_length.pdf"
ggsave(filename, p)
getwd()
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
## load PIT matched junctions
lev = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)
levSub = subset(lev, lv <2); nrow(levSub) # 1389
###########################
## peptide titration curves with and withoout PIT matches
## load specificity files
dr = read.csv("IAR_TCR_dose_reponse_curves.csv", stringsAsFactors = F)
dr$isletMatch = dr$junction_alpha %in% levSub$aJunc1
dr$PITmatch = dr$junction_alpha %in% levSub$aJunc1
dr = subset(dr, !broad_specificity == "HA")
dr$broad_specificity = gsub("GAD", "GAD65", dr$broad_specificity)
dr$broad_specificity = gsub("ZNP", "ZNT8", dr$broad_specificity)
dr$traJuncLen = nchar(dr$junction_alpha)
dr$trbJuncLen = nchar(dr$junction_beta)
if(dev.cur() >1) dev.off()
quartz(width=20,height=8)  ### open plotting window
#update_geom_defaults("line", aes(size = 8))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(dr, aes(x = log10(concentration), y = percent_proliferation, group = cloneID)) + geom_line(aes(colour = PITmatch), size = 2) + facet_grid(~broad_specificity)
last_plot() + scale_x_continuous(labels = scales::math_format(10^.x))
xlab = paste0("\nPeptide concentration, ", c("\u03BC"),"g","/ml")
ylab = "% Proliferation\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + scale_y_continuous(limits = c(-2,100), breaks = c(0,25, 50, 75,100))
p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = "Fig_4A_Peptide_titration_by_PITmatches.pdf"
ggsave(filename, p)
rm(list = ls())
library(plyr)
library(edgeR)
library(compareGroups)
library(dbscan)
library(MAST)
library(ggsignif)
library(monocle3)
library(dplyr)
library(geosphere)
library(RColorBrewer)
library(gtools)
library(psych)
library(gdata)
library(ggplot2); library(reshape2); theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
##################
## TCR CDR peptide contacts- all
## Prepare and load data file
## Use all PIT-matched IAR1 TCRs with known specificity. Construct models using TCRmodel (https://tcrmodel.ibbr.umd.edu/). Assumed ##same peptide bound as by the exmplar with known specificity. View models in Mol* viewer (https://molstar.org/viewer/). Select peptide chain, the select residues, followed by Manipulate Selection, Surrounding Residues 5A of selection. Record number of residues highlighted for each chain in sequence viewer- repeat counts at least twice or until getting a consensus result. Identify CDR1, CDR2, CDR3 and other regions using IMGT. Manually tabulate results in CDR regions. Verify results by checking at least twice.
## load tabulated and annotated Structural results.
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
contacts = read.delim("PIT_matched_TCRs_w_chain_seqs_manual_All_080123.txt")
contacts$traR13 = contacts$chain1.cdr1/contacts$chain.1.cdr3
contacts$trbR13 = contacts$chain2.cdr1/contacts$chain.2.cdr3
mCont = melt(contacts, measure.vars = c("chain1.cdr1",	"chain.1.cdr2", "chain.1.cdr3", "chain2.cdr1",	"chain.2.cdr2",	"chain.2.cdr3", "otherTRA",	"otherTRB"))
colnames(mCont) = gsub("value","contacts", colnames(mCont))
mCont$variable = gsub("chain1.cdr1","TraCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr1","TraCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr2","TraCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain2.cdr1","TrbCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr1","TrbCDR1", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr2","TrbCDR2", mCont$variable, fixed = T)
mCont$variable = gsub("chain.2.cdr3","TrbCDR3", mCont$variable, fixed = T)
mCont$variable = gsub("otherTRA","TraOther", mCont$variable, fixed = T)
mCont$variable = gsub("otherTRB","TrbOther", mCont$variable, fixed = T)
mCont$variable = gsub("chain.1.cdr3","TraCDR3", mCont$variable, fixed = T)
#mCont$variable = factor(mCont$variable, levels = )
mCont$chain = ifelse(mCont$variable %in% grep("Tra", mCont$variable, value = T), "TRA",
ifelse(mCont$variable %in% grep("Trb", mCont$variable, value = T), "TRB","other"))
toPlot2 = subset(mCont, !variable %in% grep("other", mCont$variable, value = T))
toPlot2 = subset(toPlot2, !variable %in% grep("cdr2", mCont$variable, value = T))
#toPlot2 = na.omit(toPlot2)
###################
##  plot TRA CDR1/CDR3 contact ratio, color by PITmatch
toPlot3 = mCont[!duplicated(mCont$CloneID),]
#toPlot3 = na.omit(toPlot3 )
if(dev.cur()>1)dev.off()
quartz(width=11,height=8, dpi=72)  ### open plotting window
theme_set(theme_bw(30) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
update_geom_defaults("density2d", aes(size = 4))
#pal = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffed6f','#b15928', "gray")
pal = c("#1b9e77", "#d95f02", "#7570b3")
#pal = c("#d3d3d3", "#1b9e77", "other") # all dots gray palette
ggplot(toPlot3, aes(x = traLen, y = (traR13))) + geom_jitter(aes(color = PITmatch))
last_plot() + geom_smooth(method='lm',formula=y ~ x, aes(), colour = "black");
last_plot() + scale_color_manual(values = pal, name = "PITmatch")# custom colors
#last_plot() + geom_hline(yintercept = 0.8)
xlab = "\nTRA junction length (AA)"
ylab = "Peptide contacts, \nCDR1/CDR3 ratio\n"
last_plot() + labs(x = xlab, y = ylab)
p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = "Fig_3D_CDR1_CDR3_ratio_versus_junction_length.pdf"
ggsave(filename, p)
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
library(reshape2)
library(psych)
library(ggplot2)
library(r2symbols)
library(stringdist)
library(scales)
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
## load PIT matched junctions
lev = read.csv("Levenshtein_index_IAR_CD4_with_islet_TCRS_lv.lt9.csv", stringsAsFactors = F)
levSub = subset(lev, lv <2); nrow(levSub) # 1389
###########################
## peptide titration curves with and withoout PIT matches
## load specificity files
dr = read.csv("IAR_TCR_dose_reponse_curves.csv", stringsAsFactors = F)
dr$isletMatch = dr$junction_alpha %in% levSub$aJunc1
dr$PITmatch = dr$junction_alpha %in% levSub$aJunc1
dr = subset(dr, !broad_specificity == "HA")
dr$broad_specificity = gsub("GAD", "GAD65", dr$broad_specificity)
dr$broad_specificity = gsub("ZNP", "ZNT8", dr$broad_specificity)
dr$traJuncLen = nchar(dr$junction_alpha)
dr$trbJuncLen = nchar(dr$junction_beta)
if(dev.cur() >1) dev.off()
quartz(width=20,height=8)  ### open plotting window
#update_geom_defaults("line", aes(size = 8))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(dr, aes(x = log10(concentration), y = percent_proliferation, group = cloneID)) + geom_line(aes(colour = PITmatch), size = 2) + facet_grid(~broad_specificity)
last_plot() + scale_x_continuous(labels = scales::math_format(10^.x))
xlab = paste0("\nPeptide concentration, ", c("\u03BC"),"g","/ml")
ylab = "% Proliferation\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + scale_y_continuous(limits = c(-2,100), breaks = c(0,25, 50, 75,100))
p = last_plot()
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/Figure_PDFs/")
filename = "Fig_4A_Peptide_titration_by_PITmatches.pdf"
ggsave(filename, p)
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
require(ggplot2)
library(stringdist)
library(ggsignif)
library(Peptides)
#library(brigg)
library(tcrGraph)
library(tidyverse)
library(igraph)
library(graphlayouts)
library(ggraph)
library(viridis)
library(gridExtra)
library(plyr)
#################################
## load vdjdb database - test different epitope per junction
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
db <- read.delim("vdjdb.slim.txt", stringsAsFactors=FALSE) #
colnames(db)[2] = c("junction")
hu = subset(db, species == "HomoSapiens") #4085; 0900417 version 8827; 62753 07312020 version; 67871 11242022 version
huNOT0 = subset(hu, !complex.id == 0)
colnames(huNOT0) = gsub("complex.id", "libid", colnames(huNOT0))
colnames(huNOT0) = gsub("v.segm", "v_gene", colnames(huNOT0))
colnames(huNOT0) = gsub("j.segm", "j_gene", colnames(huNOT0))
huNOT0$reference.id = gsub("https://www.10xgenomics.com/resources/application-notes/a-new-way-of-exploring-immunity-linking-highly-multiplexed-antigen-recognition-to-immune-repertoire-and-phenotype/#", "https://pages.10xgenomics.com/rs/446-PBO-704/images/10x_AN047_IP_A_New_Way_of_Exploring_Immunity_Digital.pdf", huNOT0$reference.id)
huNOT0$juncLen = nchar(huNOT0$junction)
noChains =  ddply(huNOT0,.(libid), plyr::summarize, sum = length(junction)) #
pairs = subset(noChains, sum == 2)
#huNOT0 = subset(huNOT0, libid %in% pairs$libid)
hu10X = subset(huNOT0, huNOT0$reference.id %in% grep("10x", huNOT0$reference.id, value = T))
#hu10X = hu10X[c("libid", "Gene", "v_gene", "junction", "j_gene", "Epitope.gene")]
#colnames(hu10X) = c("libid", "chainType", "v_gene", "junction", "j_gene", "study_group")
###############################
## hydrophobicity of VDJdb single and multiple epitope TCR chains
huTra = subset(huNOT0, gene == "TRA")
randTrav= subset(huTra, huTra$juncLen == sample(huTra$juncLen, size = length(huTra$juncLen)))
huTrb = subset(huNOT0, gene == "TRB")
vdjdbVar = c("huTrb")
vdjdb = get(vdjdbVar)
library(Peptides)
vdjdb$hydro = hydrophobicity( vdjdb$junction, scale = "Eisenberg")
noEpiPerJunc =  ddply(vdjdb,.(gene, junction, juncLen, hydro), plyr::summarize, sum = length(antigen.epitope)) # 20786
toPlot = noEpiPerJunc
one = subset(toPlot, sum == 1)
gtOne = subset(toPlot, sum  > 1)
one$NoEpitopes = c("one")
gtOne$NoEpitopes = c("multiple")
summary(one$juncLen)
summary(gtOne$juncLen)
summary(one$hydro)
summary(gtOne$hydro)
test = ks.test(one$hydro, gtOne$hydro)
toPlot2 = rbind(one, gtOne)
toPlot = vdjdb
ks.test(one$hydro, gtOne$hydro) #p-value = 2.692e-06 ffor TRA, 0.86 for TRB
summary(one$hydro) # median = 0.19571 for TRA, 0.114 for TRB
summary(gtOne$hydro) # median = 0.21168 fro TRA, 0.115 for TRB
## density plot
dev.off()
quartz(width=11,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(toPlot2, aes(x = hydro)) + geom_density(aes(fill = NoEpitopes), alpha = 0.5, adjust = 1)
xlab = "\nHydrophobicity"
ylab = "Density\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + geom_vline(xintercept = median(one$hydro), lty = "dashed")
last_plot() + geom_vline(xintercept = median(gtOne$hydro), lty = "solid")
last_plot() + scale_fill_manual(values=cbPalette)
last_plot() + scale_x_continuous(limits = c(-0.6, 0.6))
p = last_plot()
if(dev.cur()>1)dev.off()
quartz(width=11,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(toPlot2, aes(x = hydro)) + geom_density(aes(fill = NoEpitopes), alpha = 0.5, adjust = 1)
if(dev.cur()>1)dev.off()
quartz(width=11,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(toPlot2, aes(x = hydro)) + geom_density(aes(fill = NoEpitopes), alpha = 0.5, adjust = 1)
xlab = "\nHydrophobicity"
ylab = "Density\n"
last_plot() + labs(x = xlab, y = ylab)
last_plot() + geom_vline(xintercept = median(one$hydro), lty = "dashed")
last_plot() + geom_vline(xintercept = median(gtOne$hydro), lty = "solid")
last_plot() + scale_fill_manual(values=cbPalette)
last_plot() + scale_x_continuous(limits = c(-0.6, 0.6))
p = last_plot()
forLab = ggplot_build(p)
Y = 0.9*(max(forLab$data[[1]]$density))
X = -0.9*(max((forLab$data[[1]]$x)))
label = paste("KS test, \np-value =", scientific(test$p.value, 2), sep = " ")
last_plot() + annotate("text", X, Y, label = label, size = 8, hjust = 0)
p = last_plot()
View(toPlot2)
## density plot different epitope per junction withh down sampling
vdjdbVar = c("huTra")
vdjdb = get(vdjdbVar)
noEpiPerJunc =  ddply(vdjdb,.(gene, junction, vdjdb.score, juncLen), plyr::summarize, sum = length(antigen.gene)) # 19435
toPlot = noEpiPerJunc
toPlot$group = ifelse(toPlot$sum == 1, "oneSpecificity","multiSpecificity")
toPlot$group = factor(toPlot$group, levels = c("oneSpecificity", "multiSpecificity"))
dev.off()
quartz(width=14,height=8, dpi=72)  ### open plotting window
update_geom_defaults("line", aes(size = 2))
update_geom_defaults("point", aes(size = 2))
theme_set(theme_bw(36) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
cbPalette = c('#66c2a5','#fc8d62', 'gray')
ggplot(toPlot, aes(x = sum)) + geom_density(aes(fill = group), alpha = 0.5, adjust = 1)
last_plot() + scale_x_continuous(limits = c(0,6), breaks = c(0, 2,4, 6)) #+ facet_grid(~group)
last_plot() + scale_fill_manual(values=cbPalette)
xlab = "\nNumber VDJdb specificities"
ylab = "TCR chain density\n"
last_plot() + labs(x = xlab, y = ylab)
#last_plot() + geom_vline(xintercept = 1)
rm(list = ls())
require(Biostrings)
require(limma)
require(plyr)
require(gdata)
require(ggplot2)
library(stringdist)
library(ggsignif)
library(Peptides)
#library(brigg)
library(tcrGraph)
library(tidyverse)
library(igraph)
library(graphlayouts)
library(ggraph)
library(viridis)
library(gridExtra)
library(plyr)
#################################
## load vdjdb database - test different epitope per junction
setwd("/Users/peterlinsley/Desktop/PIT_TCR_paper_code/data/")
db <- read.delim("vdjdb.slim.txt", stringsAsFactors=FALSE) #
colnames(db)[2] = c("junction")
hu = subset(db, species == "HomoSapiens") #4085; 0900417 version 8827; 62753 07312020 version; 67871 11242022 version
huNOT0 = subset(hu, !complex.id == 0)
colnames(huNOT0) = gsub("complex.id", "libid", colnames(huNOT0))
colnames(huNOT0) = gsub("v.segm", "v_gene", colnames(huNOT0))
colnames(huNOT0) = gsub("j.segm", "j_gene", colnames(huNOT0))
huNOT0$reference.id = gsub("https://www.10xgenomics.com/resources/application-notes/a-new-way-of-exploring-immunity-linking-highly-multiplexed-antigen-recognition-to-immune-repertoire-and-phenotype/#", "https://pages.10xgenomics.com/rs/446-PBO-704/images/10x_AN047_IP_A_New_Way_of_Exploring_Immunity_Digital.pdf", huNOT0$reference.id)
huNOT0$juncLen = nchar(huNOT0$junction)
noChains =  ddply(huNOT0,.(libid), plyr::summarize, sum = length(junction)) #
pairs = subset(noChains, sum == 2)
#huNOT0 = subset(huNOT0, libid %in% pairs$libid)
hu10X = subset(huNOT0, huNOT0$reference.id %in% grep("10x", huNOT0$reference.id, value = T))
#hu10X = hu10X[c("libid", "Gene", "v_gene", "junction", "j_gene", "Epitope.gene")]
#colnames(hu10X) = c("libid", "chainType", "v_gene", "junction", "j_gene", "study_group")
###############################
## hydrophobicity of VDJdb single and multiple epitope TCR chains
huTra = subset(huNOT0, gene == "TRA")
randTrav= subset(huTra, huTra$juncLen == sample(huTra$juncLen, size = length(huTra$juncLen)))
huTrb = subset(huNOT0, gene == "TRB")
vdjdbVar = c("huTrb")
vdjdb = get(vdjdbVar)
library(Peptides)
vdjdb$hydro = hydrophobicity( vdjdb$junction, scale = "Eisenberg")
noEpiPerJunc =  ddply(vdjdb,.(gene, junction, juncLen, hydro), plyr::summarize, sum = length(antigen.epitope)) # 20786
toPlot = noEpiPerJunc
one = subset(toPlot, sum == 1)
gtOne = subset(toPlot, sum  > 1)
one$NoEpitopes = c("one")
gtOne$NoEpitopes = c("multiple")
summary(one$juncLen)
summary(gtOne$juncLen)
summary(one$hydro)
summary(gtOne$hydro)
test = ks.test(one$hydro, gtOne$hydro)
toPlot2 = rbind(one, gtOne)
toPlot = vdjdb
